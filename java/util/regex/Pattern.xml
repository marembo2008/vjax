<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<Pattern class="java.util.regex.Pattern" ref-id="1197700426">
   <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="java/io/Serializable.xml"/>
   <implements interface="java.io.Serializable"/>
   <extends class="java.lang.Object"/>
   <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="java/lang/Object.xml"/>
   <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="java/util/regex/Pattern$BitClass.xml"/>
   <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="java/lang/StringBuilder.xml"/>
   <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="java/util/regex/PatternSyntaxException.xml"/>
   <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="java/lang/ClassNotFoundException.xml"/>
   <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="java/io/IOException.xml"/>
   <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="java/io/ObjectInputStream.xml"/>
   <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="java/util/regex/Matcher.xml"/>
   <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="java/util/regex/Pattern.xml"/>
   <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="java/lang/CharSequence.xml"/>
   <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="java/util/regex/Pattern$CharProperty.xml"/>
   <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="java/util/regex/Pattern$GroupHead.xml"/>
   <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="java/util/Map.xml"/>
   <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="java/util/regex/Pattern$Node.xml"/>
   <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="java/lang/String.xml"/>
   <constructors>
      <constructor visibility="private">
         <parameters>
            <parameter type="java.lang.String"/>
            <parameter type="int"/>
         </parameters>
      </constructor>
   </constructors>
   <fields>
      <UNIX_LINES type="int" visibility="public" final="true" static-final="true"/>
      <CASE_INSENSITIVE type="int" visibility="public" final="true" static-final="true"/>
      <COMMENTS type="int" visibility="public" final="true" static-final="true"/>
      <MULTILINE type="int" visibility="public" final="true" static-final="true"/>
      <LITERAL type="int" visibility="public" final="true" static-final="true"/>
      <DOTALL type="int" visibility="public" final="true" static-final="true"/>
      <UNICODE_CASE type="int" visibility="public" final="true" static-final="true"/>
      <CANON_EQ type="int" visibility="public" final="true" static-final="true"/>
      <UNICODE_CHARACTER_CLASS type="int" visibility="public" final="true" static-final="true"/>
      <serialVersionUID type="long" visibility="private" final="true" static-final="true"/>
      <pattern type="java.lang.String" visibility="private"/>
      <flags type="int" visibility="private"/>
      <compiled type="boolean" visibility="private" transient="true" volatile="true"/>
      <normalizedPattern type="java.lang.String" visibility="private" transient="true"/>
      <root type="java.util.regex.Pattern$Node" transient="true"/>
      <matchRoot type="java.util.regex.Pattern$Node" transient="true"/>
      <buffer type="[I" transient="true"/>
      <namedGroups type="java.util.Map" transient="true" volatile="true"/>
      <groupNodes type="[Ljava.util.regex.Pattern$GroupHead;" transient="true"/>
      <temp type="[I" visibility="private" transient="true"/>
      <capturingGroupCount type="int" transient="true"/>
      <localCount type="int" transient="true"/>
      <cursor type="int" visibility="private" transient="true"/>
      <patternLength type="int" visibility="private" transient="true"/>
      <hasSupplementary type="boolean" visibility="private" transient="true"/>
      <MAX_REPS type="int" final="true" static-final="true"/>
      <GREEDY type="int" final="true" static-final="true"/>
      <LAZY type="int" final="true" static-final="true"/>
      <POSSESSIVE type="int" final="true" static-final="true"/>
      <INDEPENDENT type="int" final="true" static-final="true"/>
      <lookbehindEnd type="java.util.regex.Pattern$Node" static-final="true"/>
      <accept type="java.util.regex.Pattern$Node" static-final="true"/>
      <lastAccept type="java.util.regex.Pattern$Node" static-final="true"/>
      <_assertionsDisabled escapeSequence="0:$" type="boolean" final="true" static-final="true"/>
   </fields>
   <methods>
      <clazz return-type="java.util.regex.Pattern$CharProperty" visibility="private">
         <parameters>
            <parameter parameter-type="boolean"/>
         </parameters>
      </clazz>
      <toString return-type="java.lang.String" visibility="public" overrides="true"/>
      <flags return-type="int" visibility="public"/>
      <append return-type="void" visibility="private">
         <parameters>
            <parameter parameter-type="int"/>
            <parameter parameter-type="int"/>
         </parameters>
      </append>
      <getClass return-type="int" visibility="private">
         <parameters>
            <parameter parameter-type="int"/>
         </parameters>
      </getClass>
      <c return-type="int" visibility="private"/>
      <matches return-type="boolean" visibility="public" static-final="true">
         <parameters>
            <parameter parameter-type="java.lang.String"/>
            <parameter parameter-type="java.lang.CharSequence"/>
         </parameters>
      </matches>
      <split return-type="[Ljava.lang.String;" visibility="public">
         <parameters>
            <parameter parameter-type="java.lang.CharSequence"/>
            <parameter parameter-type="int"/>
         </parameters>
      </split>
      <split return-type="[Ljava.lang.String;" visibility="public">
         <parameters>
            <parameter parameter-type="java.lang.CharSequence"/>
         </parameters>
      </split>
      <next return-type="int" visibility="private"/>
      <x return-type="int" visibility="private"/>
      <compile return-type="void" visibility="private"/>
      <compile return-type="java.util.regex.Pattern" visibility="public" static-final="true">
         <parameters>
            <parameter parameter-type="java.lang.String"/>
         </parameters>
      </compile>
      <compile return-type="java.util.regex.Pattern" visibility="public" static-final="true">
         <parameters>
            <parameter parameter-type="java.lang.String"/>
            <parameter parameter-type="int"/>
         </parameters>
      </compile>
      <matcher return-type="java.util.regex.Matcher" visibility="public">
         <parameters>
            <parameter parameter-type="java.lang.CharSequence"/>
         </parameters>
      </matcher>
      <access_200 escapeSequence="6:$" return-type="boolean" static-final="true">
         <parameters>
            <parameter parameter-type="int"/>
            <parameter parameter-type="int"/>
            <parameter parameter-type="int"/>
         </parameters>
      </access_200>
      <readObject return-type="void" visibility="private">
         <parameters>
            <parameter parameter-type="java.io.ObjectInputStream"/>
         </parameters>
         <throws>
            <throwable throws="java.io.IOException"/>
            <throwable throws="java.lang.ClassNotFoundException"/>
         </throws>
      </readObject>
      <o return-type="int" visibility="private"/>
      <access_300 escapeSequence="6:$" return-type="int" static-final="true">
         <parameters>
            <parameter parameter-type="java.lang.CharSequence"/>
            <parameter parameter-type="int"/>
            <parameter parameter-type="int"/>
         </parameters>
      </access_300>
      <access_400 escapeSequence="6:$" return-type="boolean" static-final="true">
         <parameters>
            <parameter parameter-type="java.util.regex.Matcher"/>
            <parameter parameter-type="int"/>
            <parameter parameter-type="java.lang.CharSequence"/>
         </parameters>
      </access_400>
      <ref return-type="java.util.regex.Pattern$Node" visibility="private">
         <parameters>
            <parameter parameter-type="int"/>
         </parameters>
      </ref>
      <access_600 escapeSequence="6:$" return-type="java.util.regex.Pattern$CharProperty" static-final="true">
         <parameters>
            <parameter parameter-type="int"/>
            <parameter parameter-type="int"/>
         </parameters>
      </access_600>
      <mark return-type="void" visibility="private">
         <parameters>
            <parameter parameter-type="int"/>
         </parameters>
      </mark>
      <peek return-type="int" visibility="private"/>
      <read return-type="int" visibility="private"/>
      <skip return-type="int" visibility="private"/>
      <error return-type="java.util.regex.PatternSyntaxException" visibility="private">
         <parameters>
            <parameter parameter-type="java.lang.String"/>
         </parameters>
      </error>
      <normalize return-type="void" visibility="private"/>
      <accept return-type="void" visibility="private">
         <parameters>
            <parameter parameter-type="int"/>
            <parameter parameter-type="java.lang.String"/>
         </parameters>
      </accept>
      <pattern return-type="java.lang.String" visibility="public"/>
      <u return-type="int" visibility="private"/>
      <escape return-type="int" visibility="private">
         <parameters>
            <parameter parameter-type="boolean"/>
            <parameter parameter-type="boolean"/>
         </parameters>
      </escape>
      <quote return-type="java.lang.String" visibility="public" static-final="true">
         <parameters>
            <parameter parameter-type="java.lang.String"/>
         </parameters>
      </quote>
      <normalizeCharClass return-type="int" visibility="private">
         <parameters>
            <parameter parameter-type="java.lang.StringBuilder"/>
            <parameter parameter-type="int"/>
         </parameters>
      </normalizeCharClass>
      <produceEquivalentAlternation return-type="java.lang.String" visibility="private">
         <parameters>
            <parameter parameter-type="java.lang.String"/>
         </parameters>
      </produceEquivalentAlternation>
      <producePermutations return-type="[Ljava.lang.String;" visibility="private">
         <parameters>
            <parameter parameter-type="java.lang.String"/>
         </parameters>
      </producePermutations>
      <composeOneStep return-type="java.lang.String" visibility="private">
         <parameters>
            <parameter parameter-type="java.lang.String"/>
         </parameters>
      </composeOneStep>
      <RemoveQEQuoting return-type="void" visibility="private"/>
      <printObjectTree return-type="void" visibility="private" static-final="true">
         <parameters>
            <parameter parameter-type="java.util.regex.Pattern$Node"/>
         </parameters>
      </printObjectTree>
      <has return-type="boolean" visibility="private">
         <parameters>
            <parameter parameter-type="int"/>
         </parameters>
      </has>
      <readEscaped return-type="int" visibility="private"/>
      <nextEscaped return-type="int" visibility="private"/>
      <peekPastWhitespace return-type="int" visibility="private">
         <parameters>
            <parameter parameter-type="int"/>
         </parameters>
      </peekPastWhitespace>
      <parsePastWhitespace return-type="int" visibility="private">
         <parameters>
            <parameter parameter-type="int"/>
         </parameters>
      </parsePastWhitespace>
      <parsePastLine return-type="int" visibility="private"/>
      <peekPastLine return-type="int" visibility="private"/>
      <isLineSeparator return-type="boolean" visibility="private">
         <parameters>
            <parameter parameter-type="int"/>
         </parameters>
      </isLineSeparator>
      <unread return-type="void" visibility="private"/>
      <findSupplementary return-type="boolean" visibility="private">
         <parameters>
            <parameter parameter-type="int"/>
            <parameter parameter-type="int"/>
         </parameters>
      </findSupplementary>
      <isSupplementary return-type="boolean" visibility="private" final="true" static-final="true">
         <parameters>
            <parameter parameter-type="int"/>
         </parameters>
      </isSupplementary>
      <expr return-type="java.util.regex.Pattern$Node" visibility="private">
         <parameters>
            <parameter parameter-type="java.util.regex.Pattern$Node"/>
         </parameters>
      </expr>
      <sequence return-type="java.util.regex.Pattern$Node" visibility="private">
         <parameters>
            <parameter parameter-type="java.util.regex.Pattern$Node"/>
         </parameters>
      </sequence>
      <atom return-type="java.util.regex.Pattern$Node" visibility="private"/>
      <namedGroups return-type="java.util.Map"/>
      <cursor return-type="int" visibility="private"/>
      <bitsOrSingle return-type="java.util.regex.Pattern$CharProperty" visibility="private">
         <parameters>
            <parameter parameter-type="java.util.regex.Pattern$BitClass"/>
            <parameter parameter-type="int"/>
         </parameters>
      </bitsOrSingle>
      <range return-type="java.util.regex.Pattern$CharProperty" visibility="private">
         <parameters>
            <parameter parameter-type="java.util.regex.Pattern$BitClass"/>
         </parameters>
      </range>
      <single return-type="int" visibility="private"/>
      <family return-type="java.util.regex.Pattern$CharProperty" visibility="private">
         <parameters>
            <parameter parameter-type="boolean"/>
            <parameter parameter-type="boolean"/>
         </parameters>
      </family>
      <unicodeScriptPropertyFor return-type="java.util.regex.Pattern$CharProperty" visibility="private">
         <parameters>
            <parameter parameter-type="java.lang.String"/>
         </parameters>
      </unicodeScriptPropertyFor>
      <unicodeBlockPropertyFor return-type="java.util.regex.Pattern$CharProperty" visibility="private">
         <parameters>
            <parameter parameter-type="java.lang.String"/>
         </parameters>
      </unicodeBlockPropertyFor>
      <charPropertyNodeFor return-type="java.util.regex.Pattern$CharProperty" visibility="private">
         <parameters>
            <parameter parameter-type="java.lang.String"/>
         </parameters>
      </charPropertyNodeFor>
      <groupname return-type="java.lang.String" visibility="private">
         <parameters>
            <parameter parameter-type="int"/>
         </parameters>
      </groupname>
      <group0 return-type="java.util.regex.Pattern$Node" visibility="private"/>
      <createGroup return-type="java.util.regex.Pattern$Node" visibility="private">
         <parameters>
            <parameter parameter-type="boolean"/>
         </parameters>
      </createGroup>
      <addFlag return-type="void" visibility="private"/>
      <subFlag return-type="void" visibility="private"/>
      <closure return-type="java.util.regex.Pattern$Node" visibility="private">
         <parameters>
            <parameter parameter-type="java.util.regex.Pattern$Node"/>
         </parameters>
      </closure>
      <setcursor return-type="void" visibility="private">
         <parameters>
            <parameter parameter-type="int"/>
         </parameters>
      </setcursor>
      <uxxxx return-type="int" visibility="private"/>
      <countChars return-type="int" visibility="private" final="true" static-final="true">
         <parameters>
            <parameter parameter-type="java.lang.CharSequence"/>
            <parameter parameter-type="int"/>
            <parameter parameter-type="int"/>
         </parameters>
      </countChars>
      <countCodePoints return-type="int" visibility="private" final="true" static-final="true">
         <parameters>
            <parameter parameter-type="java.lang.CharSequence"/>
         </parameters>
      </countCodePoints>
      <newSingle return-type="java.util.regex.Pattern$CharProperty" visibility="private">
         <parameters>
            <parameter parameter-type="int"/>
         </parameters>
      </newSingle>
      <newSlice return-type="java.util.regex.Pattern$Node" visibility="private">
         <parameters>
            <parameter parameter-type="[I"/>
            <parameter parameter-type="int"/>
            <parameter parameter-type="boolean"/>
         </parameters>
      </newSlice>
      <inRange return-type="boolean" visibility="private" static-final="true">
         <parameters>
            <parameter parameter-type="int"/>
            <parameter parameter-type="int"/>
            <parameter parameter-type="int"/>
         </parameters>
      </inRange>
      <rangeFor return-type="java.util.regex.Pattern$CharProperty" visibility="private" static-final="true">
         <parameters>
            <parameter parameter-type="int"/>
            <parameter parameter-type="int"/>
         </parameters>
      </rangeFor>
      <caseInsensitiveRangeFor return-type="java.util.regex.Pattern$CharProperty" visibility="private">
         <parameters>
            <parameter parameter-type="int"/>
            <parameter parameter-type="int"/>
         </parameters>
      </caseInsensitiveRangeFor>
      <union return-type="java.util.regex.Pattern$CharProperty" visibility="private" static-final="true">
         <parameters>
            <parameter parameter-type="java.util.regex.Pattern$CharProperty"/>
            <parameter parameter-type="java.util.regex.Pattern$CharProperty"/>
         </parameters>
      </union>
      <intersection return-type="java.util.regex.Pattern$CharProperty" visibility="private" static-final="true">
         <parameters>
            <parameter parameter-type="java.util.regex.Pattern$CharProperty"/>
            <parameter parameter-type="java.util.regex.Pattern$CharProperty"/>
         </parameters>
      </intersection>
      <setDifference return-type="java.util.regex.Pattern$CharProperty" visibility="private" static-final="true">
         <parameters>
            <parameter parameter-type="java.util.regex.Pattern$CharProperty"/>
            <parameter parameter-type="java.util.regex.Pattern$CharProperty"/>
         </parameters>
      </setDifference>
      <hasBaseCharacter return-type="boolean" visibility="private" static-final="true">
         <parameters>
            <parameter parameter-type="java.util.regex.Matcher"/>
            <parameter parameter-type="int"/>
            <parameter parameter-type="java.lang.CharSequence"/>
         </parameters>
      </hasBaseCharacter>
   </methods>
</Pattern>